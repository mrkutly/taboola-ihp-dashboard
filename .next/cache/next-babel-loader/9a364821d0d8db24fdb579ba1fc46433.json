{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/mark.sauer.utley/Development/ihp/client/pages/_document.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Document, { Html, Main, NextScript, Head } from 'next/document';\nimport { ServerStyleSheet } from 'styled-components'; // This is allowing styled-components to work on the server side.\n// Without this, the css won't apply to the page when it first loads, causing a flicker.\n\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const sheet = new ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage;\n\n    try {\n      ctx.renderPage = () => originalRenderPage({\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        enhanceApp: App => props => sheet.collectStyles(__jsx(App, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        })))\n      });\n\n      const initialProps = await Document.getInitialProps(ctx);\n      return _objectSpread({}, initialProps, {\n        styles: __jsx(React.Fragment, null, initialProps.styles, sheet.getStyleElement())\n      });\n    } finally {\n      sheet.seal();\n    }\n  }\n\n  render() {\n    return __jsx(Html, {\n      lang: \"en-US\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), __jsx(\"body\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, __jsx(Main, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), __jsx(NextScript, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/mark.sauer.utley/Development/ihp/client/pages/_document.tsx"],"names":["Document","Html","Main","NextScript","Head","ServerStyleSheet","MyDocument","getInitialProps","ctx","sheet","originalRenderPage","renderPage","enhanceApp","App","props","collectStyles","initialProps","styles","getStyleElement","seal","render"],"mappings":";;;;;AAAA,OAAOA,QAAP,IACCC,IADD,EACOC,IADP,EACaC,UADb,EACyBC,IADzB,QAEO,eAFP;AAGA,SAASC,gBAAT,QAAiC,mBAAjC,C,CACA;AACA;;AAEA,eAAe,MAAMC,UAAN,SAAyBN,QAAzB,CAAkC;AAChD,eAAaO,eAAb,CAA6BC,GAA7B,EAAkC;AACjC,UAAMC,KAAK,GAAG,IAAIJ,gBAAJ,EAAd;AACA,UAAMK,kBAAkB,GAAGF,GAAG,CAACG,UAA/B;;AAEA,QAAI;AACHH,MAAAA,GAAG,CAACG,UAAJ,GAAiB,MAAMD,kBAAkB,CAAC;AACzC;AACAE,QAAAA,UAAU,EAAGC,GAAD,IAAUC,KAAD,IAAWL,KAAK,CAACM,aAAN,CAAoB,MAAC,GAAD,eAASD,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAApB;AAFS,OAAD,CAAzC;;AAKA,YAAME,YAAY,GAAG,MAAMhB,QAAQ,CAACO,eAAT,CAAyBC,GAAzB,CAA3B;AACA,+BACIQ,YADJ;AAECC,QAAAA,MAAM,EACL,4BACED,YAAY,CAACC,MADf,EAEER,KAAK,CAACS,eAAN,EAFF;AAHF;AASA,KAhBD,SAgBU;AACTT,MAAAA,KAAK,CAACU,IAAN;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACR,WACC,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEC,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CAFD,CADD;AASA;;AApC+C","sourcesContent":["import Document, {\n\tHtml, Main, NextScript, Head,\n} from 'next/document';\nimport { ServerStyleSheet } from 'styled-components';\n// This is allowing styled-components to work on the server side.\n// Without this, the css won't apply to the page when it first loads, causing a flicker.\n\nexport default class MyDocument extends Document {\n\tstatic async getInitialProps(ctx) {\n\t\tconst sheet = new ServerStyleSheet();\n\t\tconst originalRenderPage = ctx.renderPage;\n\n\t\ttry {\n\t\t\tctx.renderPage = () => originalRenderPage({\n\t\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t\tenhanceApp: (App) => (props) => sheet.collectStyles(<App {...props} />),\n\t\t\t});\n\n\t\t\tconst initialProps = await Document.getInitialProps(ctx);\n\t\t\treturn {\n\t\t\t\t...initialProps,\n\t\t\t\tstyles: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{initialProps.styles}\n\t\t\t\t\t\t{sheet.getStyleElement()}\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t};\n\t\t} finally {\n\t\t\tsheet.seal();\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Html lang=\"en-US\">\n\t\t\t\t<Head />\n\t\t\t\t<body>\n\t\t\t\t\t<Main />\n\t\t\t\t\t<NextScript />\n\t\t\t\t</body>\n\t\t\t</Html>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}