{"ast":null,"code":"const headers = {\n  Accepts: 'application/json',\n  'Cache-Control': 'no-cache',\n  'Content-Type': 'application/json'\n};\nconst Adapter = {\n  async getPublisherStats(publisher) {\n    try {\n      const res = await fetch(`${process.env.BACKEND_URL}/dataframe_stats?publisher=${publisher}`, {\n        method: 'GET',\n        headers\n      });\n      return res.json();\n    } catch (error) {\n      return error;\n    }\n  },\n\n  async getPublisherAnalysisJson(publisher) {\n    try {\n      const res = await fetch(`${process.env.BACKEND_URL}/data_json?publisher=${publisher}`, {\n        method: 'GET',\n        headers\n      });\n      return res.json();\n    } catch (error) {\n      return error;\n    }\n  },\n\n  async getShortAnalysis(publisherId) {\n    try {\n      const res = await fetch(`${process.env.BACKEND_URL}/impl-short-pv-reader?publisher=${publisherId}`, {\n        method: 'GET',\n        headers\n      });\n      return res.json();\n    } catch (error) {\n      return error;\n    }\n  },\n\n  async getLongAnalysis(publisherId) {\n    try {\n      const res = await fetch(`${process.env.BACKEND_URL}/impl-pv-reader?publisher=${publisherId}`, {\n        method: 'GET',\n        headers\n      });\n      return res.json();\n    } catch (error) {\n      return error;\n    }\n  },\n\n  async getModes(publisherId) {\n    try {\n      const res = await fetch(`${process.env.BACKEND_URL}/impl-list-modes?publisher=${publisherId}`, {\n        method: 'GET',\n        headers\n      });\n      return res.json();\n    } catch (error) {\n      return error;\n    }\n  }\n\n};\nexport default Adapter;","map":{"version":3,"sources":["/Users/mark.sauer.utley/Development/ihp/client/utils/Adapter.ts"],"names":["headers","Accepts","Adapter","getPublisherStats","publisher","res","fetch","process","env","BACKEND_URL","method","json","error","getPublisherAnalysisJson","getShortAnalysis","publisherId","getLongAnalysis","getModes"],"mappings":"AAQA,MAAMA,OAA6B,GAAG;AACrCC,EAAAA,OAAO,EAAE,kBAD4B;AAErC,mBAAiB,UAFoB;AAGrC,kBAAgB;AAHqB,CAAtC;AAMA,MAAMC,OAAO,GAAG;AACf,QAAMC,iBAAN,CAAwBC,SAAxB,EAA4D;AAC3D,QAAI;AACH,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,WAAY,8BAA6BL,SAAU,EAAnE,EAAsE;AAC5FM,QAAAA,MAAM,EAAE,KADoF;AAE5FV,QAAAA;AAF4F,OAAtE,CAAvB;AAIA,aAAOK,GAAG,CAACM,IAAJ,EAAP;AACA,KAND,CAME,OAAOC,KAAP,EAAc;AACf,aAAOA,KAAP;AACA;AACD,GAXc;;AAYf,QAAMC,wBAAN,CAA+BT,SAA/B,EAAmE;AAClE,QAAI;AACH,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,WAAY,wBAAuBL,SAAU,EAA7D,EAAgE;AACtFM,QAAAA,MAAM,EAAE,KAD8E;AAEtFV,QAAAA;AAFsF,OAAhE,CAAvB;AAIA,aAAOK,GAAG,CAACM,IAAJ,EAAP;AACA,KAND,CAME,OAAOC,KAAP,EAAc;AACf,aAAOA,KAAP;AACA;AACD,GAtBc;;AAuBf,QAAME,gBAAN,CAAuBC,WAAvB,EAA6D;AAC5D,QAAI;AACH,YAAMV,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,WAAY,mCAAkCM,WAAY,EAA1E,EAA6E;AACnGL,QAAAA,MAAM,EAAE,KAD2F;AAEnGV,QAAAA;AAFmG,OAA7E,CAAvB;AAIA,aAAOK,GAAG,CAACM,IAAJ,EAAP;AACA,KAND,CAME,OAAOC,KAAP,EAAc;AACf,aAAOA,KAAP;AACA;AACD,GAjCc;;AAkCf,QAAMI,eAAN,CAAsBD,WAAtB,EAA4D;AAC3D,QAAI;AACH,YAAMV,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,WAAY,6BAA4BM,WAAY,EAApE,EAAuE;AAC7FL,QAAAA,MAAM,EAAE,KADqF;AAE7FV,QAAAA;AAF6F,OAAvE,CAAvB;AAIA,aAAOK,GAAG,CAACM,IAAJ,EAAP;AACA,KAND,CAME,OAAOC,KAAP,EAAc;AACf,aAAOA,KAAP;AACA;AACD,GA5Cc;;AA6Cf,QAAMK,QAAN,CAAeF,WAAf,EAAqD;AACpD,QAAI;AACH,YAAMV,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,WAAY,8BAA6BM,WAAY,EAArE,EAAwE;AAC9FL,QAAAA,MAAM,EAAE,KADsF;AAE9FV,QAAAA;AAF8F,OAAxE,CAAvB;AAIA,aAAOK,GAAG,CAACM,IAAJ,EAAP;AACA,KAND,CAME,OAAOC,KAAP,EAAc;AACf,aAAOA,KAAP;AACA;AACD;;AAvDc,CAAhB;AA0DA,eAAeV,OAAf","sourcesContent":["interface Header {\n\tAccepts: string;\n\t'Cache-Control': string;\n\t'Content-Type': string;\n}\n\ntype HeadersInitInterface = Header & HeadersInit;\n\nconst headers: HeadersInitInterface = {\n\tAccepts: 'application/json',\n\t'Cache-Control': 'no-cache',\n\t'Content-Type': 'application/json',\n};\n\nconst Adapter = {\n\tasync getPublisherStats(publisher: string): Promise<object> {\n\t\ttry {\n\t\t\tconst res = await fetch(`${process.env.BACKEND_URL}/dataframe_stats?publisher=${publisher}`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders,\n\t\t\t});\n\t\t\treturn res.json();\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t},\n\tasync getPublisherAnalysisJson(publisher: string): Promise<object> {\n\t\ttry {\n\t\t\tconst res = await fetch(`${process.env.BACKEND_URL}/data_json?publisher=${publisher}`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders,\n\t\t\t});\n\t\t\treturn res.json();\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t},\n\tasync getShortAnalysis(publisherId: number): Promise<object> {\n\t\ttry {\n\t\t\tconst res = await fetch(`${process.env.BACKEND_URL}/impl-short-pv-reader?publisher=${publisherId}`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders,\n\t\t\t});\n\t\t\treturn res.json();\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t},\n\tasync getLongAnalysis(publisherId: number): Promise<object> {\n\t\ttry {\n\t\t\tconst res = await fetch(`${process.env.BACKEND_URL}/impl-pv-reader?publisher=${publisherId}`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders,\n\t\t\t});\n\t\t\treturn res.json();\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t},\n\tasync getModes(publisherId: number): Promise<object> {\n\t\ttry {\n\t\t\tconst res = await fetch(`${process.env.BACKEND_URL}/impl-list-modes?publisher=${publisherId}`, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders,\n\t\t\t});\n\t\t\treturn res.json();\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t},\n};\n\nexport default Adapter;\n"]},"metadata":{},"sourceType":"module"}